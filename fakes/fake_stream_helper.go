// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	context "context"
	sync "sync"

	resources "github.com/lgsvl/data-marketplace-stream-delivery/resources"
	utils "github.com/lgsvl/data-marketplace-stream-delivery/utils"
)

type FakeStreamHelper struct {
	StartStreamPullPushStub        func(context.Context, resources.DataStream, chan string) error
	startStreamPullPushMutex       sync.RWMutex
	startStreamPullPushArgsForCall []struct {
		arg1 context.Context
		arg2 resources.DataStream
		arg3 chan string
	}
	startStreamPullPushReturns struct {
		result1 error
	}
	startStreamPullPushReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStreamHelper) StartStreamPullPush(arg1 context.Context, arg2 resources.DataStream, arg3 chan string) error {
	fake.startStreamPullPushMutex.Lock()
	ret, specificReturn := fake.startStreamPullPushReturnsOnCall[len(fake.startStreamPullPushArgsForCall)]
	fake.startStreamPullPushArgsForCall = append(fake.startStreamPullPushArgsForCall, struct {
		arg1 context.Context
		arg2 resources.DataStream
		arg3 chan string
	}{arg1, arg2, arg3})
	fake.recordInvocation("StartStreamPullPush", []interface{}{arg1, arg2, arg3})
	fake.startStreamPullPushMutex.Unlock()
	if fake.StartStreamPullPushStub != nil {
		return fake.StartStreamPullPushStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.startStreamPullPushReturns
	return fakeReturns.result1
}

func (fake *FakeStreamHelper) StartStreamPullPushCallCount() int {
	fake.startStreamPullPushMutex.RLock()
	defer fake.startStreamPullPushMutex.RUnlock()
	return len(fake.startStreamPullPushArgsForCall)
}

func (fake *FakeStreamHelper) StartStreamPullPushCalls(stub func(context.Context, resources.DataStream, chan string) error) {
	fake.startStreamPullPushMutex.Lock()
	defer fake.startStreamPullPushMutex.Unlock()
	fake.StartStreamPullPushStub = stub
}

func (fake *FakeStreamHelper) StartStreamPullPushArgsForCall(i int) (context.Context, resources.DataStream, chan string) {
	fake.startStreamPullPushMutex.RLock()
	defer fake.startStreamPullPushMutex.RUnlock()
	argsForCall := fake.startStreamPullPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStreamHelper) StartStreamPullPushReturns(result1 error) {
	fake.startStreamPullPushMutex.Lock()
	defer fake.startStreamPullPushMutex.Unlock()
	fake.StartStreamPullPushStub = nil
	fake.startStreamPullPushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStreamHelper) StartStreamPullPushReturnsOnCall(i int, result1 error) {
	fake.startStreamPullPushMutex.Lock()
	defer fake.startStreamPullPushMutex.Unlock()
	fake.StartStreamPullPushStub = nil
	if fake.startStreamPullPushReturnsOnCall == nil {
		fake.startStreamPullPushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startStreamPullPushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStreamHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startStreamPullPushMutex.RLock()
	defer fake.startStreamPullPushMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStreamHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.StreamHelper = new(FakeStreamHelper)
